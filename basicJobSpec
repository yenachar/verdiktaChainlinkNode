type = "directrequest"
schemaVersion = 1
name = "Verdikta AI Evaluation"
contractAddress = "0xD67D6508D4E5611cd6a463Dd0969Fa153Be91101"
maxTaskDuration = "0s"
evmChainID = "84532"
observationSource = """
    decode_log   [type="ethabidecodelog" \
                 abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)" \
                 data="$(jobRun.logData)" \
                 topics="$(jobRun.logTopics)"]

    decode_cbor  [type="cborparse" data="$(decode_log.data)"]
    
    fetch        [type="bridge" 
                     name="verdikta-ai"
                     timeout="75s"
                     requestData="{\\"id\\": $(jobSpec.externalJobID), \\"data\\": {\\"cid\\": $(decode_cbor.cid)}}"]
    

parse_scores [type="jsonparse" path="data,aggregatedScore" data="$(fetch)"]
parse_cid    [type="jsonparse" path="data,justificationCID" data="$(fetch)"]
encode_data  [type="ethabiencode" 
            abi="(bytes32 requestId, uint256[] value, string cid)" 
            data="{ \\"requestId\\": $(decode_log.requestId), \\"value\\": $(parse_scores), \\"cid\\": $(parse_cid) }"]

    encode_tx    [type="ethabiencode" \
             abi="fulfillOracleRequest3(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes data)" \
             data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\": $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_data)}"]



    submit_tx [type="ethtx" 
          to="0xD67D6508D4E5611cd6a463Dd0969Fa153Be91101" 
          data="$(encode_tx)" 
          gasLimit="1500000"
          minConfirmations="2"
          gasPriceWei="10000000000"
          evmChainID="84532"]

    decode_log -> decode_cbor -> fetch -> parse_scores -> parse_cid -> encode_data -> encode_tx -> submit_tx
    fetch -> encode_data
"""

